AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvironmentName:
    Type: String
    Description: Which environment does this VPC belong
  ApplicationName:
    Type: String
    Description: Application name that this VPC belongs
  CustomerName:
    Type: String
    Description: Customer name that this VPC belongs
  VpcCidr:
    Type: String
    Description: VPC CIDR block (required for creating NAT
  VpcInstanceTenancy:
    Type: String
    Description: Tenancy of the VPC
    Default: dedicated
    AllowedValues:
      - dedicated
      - default
  PublicSubnet1:
    Type: String
    Description: Address range for a public subnet.
  PublicSubnet2:
    Type: String
    Description: Address range for a public subnet.
  PrivateSubnet1:
    Type: String
    Description: Address range for a private subnet.
  PrivateSubnet2:
    Type: String
    Description: Address range for a private subnet.
Resources:
  #VPC Configuration
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub "${CustomerName}-${EnvironmentName}-vpc"
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
        - Key: Application
          Value: !Ref ApplicationName
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: !Ref PublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: !Ref PublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-2
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: !Ref PrivateSubnet1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-1
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: !Ref PrivateSubnet1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet-2
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !GetAtt VPC
      InternetGatewayId: !GetAtt InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !GetAtt RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt InternetGateway
  SubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !GetAtt PublicSubnet1
      RouteTableId: !GetAtt RouteTable
  SubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !GetAtt PublicSubnet2
      RouteTableId: !GetAtt RouteTable
  SubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !GetAtt PrivateSubnet1
      RouteTableId: !GetAtt RouteTable
  SubnetRouteTableAssociation4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !GetAtt PrivateSubnet2
      RouteTableId: !GetAtt RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !GetAtt VPC
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: CFStackID
          Value: !Ref 'AWS::StackId'
  #NACLs
  InboundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  SubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociation4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkAcl
  EIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc


Outputs:
  VpcId:
    Description: ID of the VPC
    Value: !GetAtt VPC
  CidrBlock:
    Description: Set of IP addresses for the VPC
    Value: !GetAtt CidrBlock
  PubSubnet1:
    Description: PublicSubnet1 ID
    Value: !GetAtt PublicSubnet1
  PubSubnet2:
    Description: PublicSubnet2 ID
    Value: !GetAtt PublicSubnet2
  PriSubnet1:
    Description: PrivateSubnet1 ID
    Value: !GetAtt PrivateSubnet1
  PriSubnet2:
    Description: PrivateSubnet2 ID
    Value: !GetAtt PrivateSubnet2
  NATElasticIP:
    Description: ElasticIP for NAT GatewayId
    Value: !GetAtt EIPAddress
